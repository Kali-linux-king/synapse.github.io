// ========================
//  Responsive Mixins
// ========================

/// Responsive breakpoint manager
/// @param {String} $breakpoint - Breakpoint name from $breakpoints map
/// @content Styles to apply within the breakpoint
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map";
  }
}

/// Mobile-first media query for max-width
@mixin max-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: (map-get($breakpoints, $breakpoint) - 1px)) {
      @content;
    }
  }
}

/// Range-specific media query
@mixin between-breakpoints($min, $max) {
  @media (min-width: map-get($breakpoints, $min)) and 
         (max-width: (map-get($breakpoints, $max) - 1px)) {
    @content;
  }
}

// ========================
//  Typography Mixins
// ========================

/// Fluid typography with clamp()
/// @param {Number} $min-size - Minimum font size (px)
/// @param {Number} $max-size - Maximum font size (px)
/// @param {Number} $min-vw - Minimum viewport width (px)
/// @param {Number} $max-vw - Maximum viewport width (px)
@mixin fluid-type($min-size, $max-size, $min-vw: 375px, $max-vw: 1440px) {
  $unit: if(unit($min-size) == 'rem', 'rem', 'px');
  $min-size: if($unit == 'rem', strip-unit($min-size) * 1rem, $min-size);
  $max-size: if($unit == 'rem', strip-unit($max-size) * 1rem, $max-size);
  
  font-size: clamp(
    #{$min-size}, 
    calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})), 
    #{$max-size}
  );
}

/// Text truncation with ellipsis
/// @param {Number} $lines - Number of lines to show
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// ========================
//  Layout Mixins
// ========================

/// Aspect ratio container
/// @param {String} $ratio - Aspect ratio (e.g. '16/9')
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    display: block;
    content: '';
    width: 100%;
    padding-bottom: ($height / $width) * 100%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

/// Position absolute helper
/// @param {String} $pos - Position values (top, right, bottom, left)
@mixin absolute($pos) {
  position: absolute;
  @each $dir in top, right, bottom, left {
    $i: index($pos, $dir);
    @if $i {
      #{$dir}: nth($pos, $i + 1);
    }
  }
}

/// Flexbox container with optional params
/// @param {String} $justify - justify-content value
/// @param {String} $align - align-items value
/// @param {String} $direction - flex-direction value
@mixin flex($justify: null, $align: null, $direction: null) {
  display: flex;
  
  @if $justify { justify-content: $justify; }
  @if $align { align-items: $align; }
  @if $direction { flex-direction: $direction; }
}

/// CSS Grid container
/// @param {Number} $columns - Number of columns
/// @param {Number} $gap - Gap between items
@mixin grid($columns, $gap: null) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  @if $gap { gap: $gap; }
}

// ========================
//  Visual Mixins
// ========================

/// Box shadow with optional parameters
/// @param {String} $level - Shadow level from $box-shadows map
/// @param {Color} $color - Custom shadow color
@mixin shadow($level: 'base', $color: rgba(0, 0, 0, 0.1)) {
  @if map-has-key($box-shadows, $level) {
    box-shadow: map-get($box-shadows, $level);
  } @else {
    box-shadow: 0 1px 3px $color;
  }
}

/// Gradient text effect
/// @param {Color} $start - Start color
/// @param {Color} $end - End color
/// @param {String} $direction - Gradient direction
@mixin text-gradient($start, $end, $direction: to right) {
  background: linear-gradient($direction, $start, $end);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

/// Pseudo-element helper
/// @param {String} $type - 'before' or 'after'
/// @param {Map} $styles - Additional styles
@mixin pseudo($type: 'before', $styles: ()) {
  &::#{$type} {
    content: '';
    position: absolute;
    @each $property, $value in $styles {
      #{$property}: $value;
    }
    @content;
  }
}

// ========================
//  Utility Mixins
// ========================

/// Visually hide element while keeping it accessible
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/// Clearfix hack
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/// Dark mode variant
/// @param {Boolean} $invert - Whether to invert the mixin logic
@mixin dark-mode($invert: false) {
  @if $invert {
    html:not(.dark-mode) & {
      @content;
    }
  } @else {
    html.dark-mode & {
      @content;
    }
  }
}

/// Reduced motion media query
@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

// ========================
//  Helper Functions
// ========================

/// Remove unit from value
/// @param {Number} $number - Number to strip unit from
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

/// Get z-index value from layers map
/// @param {String} $layer - Layer name
@function z($layer) {
  @if map-has-key($z-indices, $layer) {
    @return map-get($z-indices, $layer);
  } @else {
    @warn "Layer '#{$layer}' not found in $z-indices map";
    @return 1;
  }
}