// ========================
//  Particle Effects
// ========================

/// Base particle container styles
/// @param {String} $position - Positioning context (absolute|fixed)
@mixin particle-container($position: absolute) {
  position: $position;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: 0;
  pointer-events: none;
  
  // Performance optimizations
  backface-visibility: hidden;
  perspective: 1000px;
  transform-style: preserve-3d;
}

/// Single particle element
/// @param {Number} $size - Particle size (px)
/// @param {Color} $color - Particle color
@mixin particle($size: 2px, $color: rgba(255, 255, 255, 0.8)) {
  position: absolute;
  width: $size;
  height: $size;
  background: $color;
  border-radius: 50%;
  opacity: 0;
  animation: particle-fade-in 1s ease-out forwards;
  
  // Performance optimizations
  will-change: transform, opacity;
  backface-visibility: hidden;
}

/// Particle connection lines
/// @param {Color} $color - Line color
/// @param {Number} $width - Line width (px)
@mixin particle-connections($color: rgba(255, 255, 255, 0.2), $width: 1px) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to right, $color 50%, transparent 50%),
                linear-gradient(to right, $color 50%, transparent 50%),
                linear-gradient(to bottom, $color 50%, transparent 50%),
                linear-gradient(to bottom, $color 50%, transparent 50%);
    background-size: $width*2 $width*2;
    opacity: 0.1;
  }
}

// ========================
//  Particle Animations
// ========================

@keyframes particle-fade-in {
  from { opacity: 0; transform: scale(0.5); }
  to { opacity: 1; transform: scale(1); }
}

@keyframes particle-float {
  0%, 100% { transform: translate(0, 0); }
  50% { transform: translate(random(20) - 10 + px, random(20) - 10 + px); }
}

@keyframes particle-pulse {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 1; }
}

@keyframes particle-connection {
  from { background-position: 0 0, $width $width, 0 0, $width $width; }
  to { background-position: $width $width, 0 0, $width $width, 0 0; }
}

// ========================
//  Preconfigured Effects
// ========================

/// Starfield particle effect
@mixin starfield($density: 100, $color: white) {
  @include particle-container;
  
  &::after {
    content: '';
    @include particle-connections($color);
    animation: particle-connection 60s linear infinite;
  }
  
  @for $i from 1 through $density {
    .particle-#{$i} {
      $size: random(3) + 1 + px;
      $opacity: random(5) * 0.1 + 0.1;
      $delay: random(10) * 0.1 + s;
      $duration: random(15) + 10 + s;
      
      @include particle($size, rgba($color, $opacity));
      top: random(100) + %;
      left: random(100) + %;
      animation: 
        particle-float $duration ease-in-out infinite $delay,
        particle-pulse ($duration / 2) ease-in-out infinite alternate $delay;
    }
  }
}

/// Neural network particle effect
@mixin neural-particles($density: 80, $primary: #4f46e5, $secondary: #a78bfa) {
  @include particle-container;
  background: linear-gradient(to bottom, 
              rgba(darken($primary, 20%), 0.1), 
              rgba(darken($secondary, 20%), 0.1));
  
  .particle {
    $size: random(4) + 2 + px;
    $color: mix($primary, $secondary, random(100));
    $opacity: random(3) * 0.1 + 0.1;
    
    @include particle($size, rgba($color, $opacity));
    animation: 
      particle-float (random(20) + 10 + s) ease-in-out infinite (random(10) * 0.1 + s),
      particle-pulse (random(10) + 5 + s) ease-in-out infinite alternate (random(10) * 0.1 + s);
  }
  
  .particle-connection {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    stroke: rgba(mix($primary, $secondary), 0.05);
    stroke-width: 1px;
  }
}

/// Floating dots effect
@mixin floating-dots($count: 50, $color: rgba(255, 255, 255, 0.5)) {
  @include particle-container;
  
  @for $i from 1 through $count {
    .dot-#{$i} {
      $size: random(6) + 2 + px;
      $opacity: random(5) * 0.1 + 0.2;
      $duration: random(20) + 20 + s;
      $delay: random(20) + s;
      
      @include particle($size, rgba($color, $opacity));
      top: random(100) + %;
      left: random(100) + %;
      animation: 
        particle-float $duration ease-in-out infinite $delay,
        particle-pulse ($duration / 2) ease-in-out infinite alternate $delay;
    }
  }
}

// ========================
//  Utility Classes
// ========================

.particles {
  @include particle-container;
  
  &--stars {
    @include starfield(150);
  }
  
  &--neural {
    @include neural-particles;
  }
  
  &--dots {
    @include floating-dots;
  }
}

// ========================
//  Performance & Accessibility
// ========================

@media (prefers-reduced-motion: reduce) {
  .particles,
  .particle,
  .particle-connection {
    animation: none !important;
    opacity: 0.1 !important;
  }
}

.particle-section {
  position: relative;
  
  .particles {
    opacity: 0.15;
  }
  
  &.dark-mode .particles {
    opacity: 0.25;
  }
}